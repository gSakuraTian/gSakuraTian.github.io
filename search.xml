<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>C++ boost网络编程-同步读写</title>
      <link href="/2023/10/08/C-boost%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B-%E5%90%8C%E6%AD%A5%E8%AF%BB%E5%86%99/"/>
      <url>/2023/10/08/C-boost%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B-%E5%90%8C%E6%AD%A5%E8%AF%BB%E5%86%99/</url>
      
        <content type="html"><![CDATA[<h3 id="网络编程基本流程"><a href="#网络编程基本流程" class="headerlink" title="网络编程基本流程"></a>网络编程基本流程</h3><p>网络编程的基本流程对于服务端是这样的<br>服务端<br>1）socket——创建socket对象。</p><p>2）bind——绑定本机ip+port。</p><p>3）listen——监听来电，若在监听到来电，则建立起连接。</p><p>4）accept——再创建一个socket对象给其收发消息。原因是现实中服务端都是面对多个客户端，那么为了区分各个客户端，则每个客户端都需再分配一个socket对象进行收发消息。</p><p>5）read、write——就是收发消息了。</p><p>对于客户端是这样的<br>客户端<br>1）socket——创建socket对象。</p><p>2）connect——根据服务端ip+port，发起连接请求。</p><p>3）write、read——建立连接后，就可发收消息了。</p><p><img src="/C-boost%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B-%E5%90%8C%E6%AD%A5%E8%AF%BB%E5%86%99/1.jpg" alt="图片"></p><h3 id="客户端设计"><a href="#客户端设计" class="headerlink" title="客户端设计"></a>客户端设计</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;boost/asio.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAX_LENGTH = <span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*客户端设计基本思路是根据服务器对端的ip和端口创建一个endpoint，</span></span><br><span class="line"><span class="comment">然后创建socket连接这个endpoint，之后就可以用同步读写的方式发送和接收数据了。*/</span></span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//创建上下文服务</span></span><br><span class="line">boost::asio::io_context ioc;</span><br><span class="line"><span class="comment">//构造endpoint  连接端点，这里使用了本机连接，可以修改IP地址测试远程连接</span></span><br><span class="line">boost::asio::ip::<span class="function">tcp::endpoint <span class="title">remote_ep</span><span class="params">(boost::asio::ip::address::from_string(<span class="string">&quot;127.0.0.1&quot;</span>), <span class="number">10086</span>)</span></span>;</span><br><span class="line">boost::asio::ip::<span class="function">tcp::socket <span class="title">sock</span><span class="params">(ioc)</span></span>;</span><br><span class="line">boost::system::error_code error = boost::asio::error::host_not_found;</span><br><span class="line"><span class="comment">// 连接服务器</span></span><br><span class="line">sock.<span class="built_in">connect</span>(remote_ep, error);</span><br><span class="line"><span class="keyword">if</span> (error)</span><br><span class="line">&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;connect failed, code is &quot;</span> &lt;&lt; error.<span class="built_in">value</span>() &lt;&lt; <span class="string">&quot; error msg is &quot;</span> &lt;&lt; error.<span class="built_in">message</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Enter Message: &quot;</span>;</span><br><span class="line"><span class="type">char</span> request[MAX_LENGTH];</span><br><span class="line">std::cin.<span class="built_in">getline</span>(request, MAX_LENGTH);</span><br><span class="line"><span class="comment">// 发送数据</span></span><br><span class="line"><span class="type">size_t</span> request_length = <span class="built_in">strlen</span>(request);</span><br><span class="line">boost::asio::<span class="built_in">write</span>(sock, boost::asio::<span class="built_in">buffer</span>(request, request_length));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收数据</span></span><br><span class="line"><span class="type">char</span> reply[MAX_LENGTH];</span><br><span class="line"><span class="type">size_t</span> reply_length = boost::asio::<span class="built_in">read</span>(sock, boost::asio::<span class="built_in">buffer</span>(reply, request_length));</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Reply is: &quot;</span>;</span><br><span class="line">std::cout.<span class="built_in">write</span>(reply, reply_length);</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">catch</span> (std::exception&amp; e)</span><br><span class="line">&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Exception: &quot;</span> &lt;&lt; e.<span class="built_in">what</span>() &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="服务端设计"><a href="#服务端设计" class="headerlink" title="服务端设计"></a>服务端设计</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;boost/asio.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> max_length = <span class="number">1024</span>;</span><br><span class="line"><span class="keyword">typedef</span> std::shared_ptr&lt;boost::asio::ip::tcp::socket&gt; socket_ptr;</span><br><span class="line">std::set&lt;std::shared_ptr&lt;std::thread&gt;&gt; thread_set;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">session</span><span class="params">(socket_ptr sock)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">/*创建session函数，该函数为服务器处理客户端请求，每当我们获取客户端连接后就调用该函数。</span></span><br><span class="line"><span class="comment">在session函数里里进行echo方式的读写，所谓echo就是应答式的处理*/</span></span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (;;)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> data[max_length];</span><br><span class="line"><span class="built_in">memset</span>(data, <span class="string">&#x27;\0&#x27;</span>, max_length);</span><br><span class="line">boost::system::error_code error;</span><br><span class="line"><span class="comment">//size_t length = boost::asio::read(sock, boost::asio::buffer(data, max_length), error);</span></span><br><span class="line"><span class="type">size_t</span> length = sock-&gt;<span class="built_in">read_some</span>(boost::asio::<span class="built_in">buffer</span>(data, max_length), error);</span><br><span class="line"><span class="keyword">if</span> (error == boost::asio::error::eof) &#123;<span class="comment">//eof表示对端关闭</span></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;connection closed by peer&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (error) &#123;</span><br><span class="line"><span class="keyword">throw</span> boost::system::<span class="built_in">system_error</span>(error);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 显示连接进来的客户端</span></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;receive from &quot;</span> &lt;&lt; sock-&gt;<span class="built_in">remote_endpoint</span>().<span class="built_in">address</span>().<span class="built_in">to_string</span>() &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;recevie message is &quot;</span> &lt;&lt; data &lt;&lt; std::endl;</span><br><span class="line"><span class="comment">// 向客户端发送数据</span></span><br><span class="line">boost::asio::<span class="built_in">write</span>(*sock, boost::asio::<span class="built_in">buffer</span>(data, max_length));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">catch</span> (std::exception&amp; e)</span><br><span class="line">&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Exception in thread: &quot;</span> &lt;&lt; e.<span class="built_in">what</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">server</span><span class="params">(boost::asio::io_context&amp; io_context, <span class="type">unsigned</span> <span class="type">short</span> port)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//server函数根据服务器ip和端口创建服务器acceptor用来接收数据，用socket接收新的连接，然后为这个socket创建session。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// io_context: 上下文 </span></span><br><span class="line"><span class="comment">// boost::asio::ip::tcp::endpoint(boost::asio::ip::tcp::v4(), port)绑定服务器本地的ip地址用IPv4的方式 端口为port</span></span><br><span class="line">boost::asio::ip::<span class="function">tcp::acceptor <span class="title">a</span><span class="params">(io_context, boost::asio::ip::tcp::endpoint(boost::asio::ip::tcp::v4(), port))</span></span>;</span><br><span class="line"><span class="keyword">for</span> (;;)</span><br><span class="line">&#123;</span><br><span class="line"><span class="function">socket_ptr <span class="title">socket</span><span class="params">(<span class="keyword">new</span> boost::asio::ip::tcp::socket(io_context))</span></span>;</span><br><span class="line"><span class="comment">// 等待直到客户端连接进来</span></span><br><span class="line">a.<span class="built_in">accept</span>(*socket);</span><br><span class="line"><span class="comment">//创建线程 调用session函数 参数socket</span></span><br><span class="line"><span class="keyword">auto</span> t = std::<span class="built_in">make_shared</span>&lt;std::thread&gt;(session, socket);</span><br><span class="line">thread_set.<span class="built_in">insert</span>(t);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">boost::asio::io_context ioc;</span><br><span class="line"><span class="built_in">server</span>(ioc, <span class="number">10086</span>);</span><br><span class="line"><span class="comment">//防止主线程结束后 子线程还没结束</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; t : thread_set)</span><br><span class="line">&#123;</span><br><span class="line">t-&gt;<span class="built_in">join</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">catch</span> (std::exception&amp; e)</span><br><span class="line">&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Exception in thread: &quot;</span> &lt;&lt; e.<span class="built_in">what</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="同步读写的优劣"><a href="#同步读写的优劣" class="headerlink" title="同步读写的优劣"></a>同步读写的优劣</h3><p>1 同步读写的缺陷在于读写是阻塞的，如果客户端对端不发送数据服务器的read操作是阻塞的，这将导致服务器处于阻塞等待状态。<br>2 可以通过开辟新的线程为新生成的连接处理读写，但是一个进程开辟的线程是有限的，约为2048个线程，在Linux环境可以通过unlimit增加一个进程开辟的线程数，但是线程过多也会导致切换消耗的时间片较多。<br>3 该服务器和客户端为应答式，实际场景为全双工通信模式，发送和接收要独立分开。<br>4 该服务器和客户端未考虑粘包处理。<br>综上所述，是我们这个服务器和客户端存在的问题，为解决上述问题，我们在接下里的文章里做不断完善和改进，主要以异步读写改进上述方案。<br>当然同步读写的方式也有其优点，比如客户端连接数不多，而且服务器并发性不高的场景，可以使用同步读写的方式。使用同步读写能简化编码难度。</p><p>学习于<a href="https://llfc.club/category?catid=225RaiVNI8pFDD5L4m807g7ZwmF#!aid/2Nr3U2vU2UxYM0odYRGAk3wWO1S">恋恋风辰</a></p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> boost </category>
          
          <category> 学习 </category>
          
          <category> 网络编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> boost </tag>
            
            <tag> 网络编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/10/08/hello-world/"/>
      <url>/2023/10/08/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
